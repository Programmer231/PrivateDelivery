// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) 
    userId            String  @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @unique
    sessionToken String   @unique
    userId       String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    status       String?
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String? @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    order         DeliveryOrder[] @relation(name: "UserTracker")
    driver        DeliveryOrder[] @relation(name: "DriverTracker")
    status        String?
}

model DeliveryOrder {
    price         Float
    personalAddress       String
    items                 String
    personalLatitude      Float
    personalLongitude     Float
    pickupLatitude      Float
    pickupLongitude     Float
    pickupAddress   String
    timeframe     String
    id            String    @id @default(cuid())
    User          User? @relation(name: "UserTracker", fields: [userId], references: [id], onDelete: Cascade)
    userId        String? @map("user_id")
    Driver        User? @relation(name: "DriverTracker", fields: [driverId], references: [id], onDelete: Cascade)
    driverId      String? @map("driver_id")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
